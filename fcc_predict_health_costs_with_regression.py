# -*- coding: utf-8 -*-
"""fcc_predict_health_costs_with_regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/freeCodeCamp/boilerplate-linear-regression-health-costs-calculator/blob/master/fcc_predict_health_costs_with_regression.ipynb
"""

# Commented out IPython magic to ensure Python compatibility.
# Import libraries. You may or may not use all of these.
!pip install -q git+https://github.com/tensorflow/docs
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

try:
  # %tensorflow_version only exists in Colab.
#   %tensorflow_version 2.x
except Exception:
  pass
import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers

import tensorflow_docs as tfdocs
import tensorflow_docs.plots
import tensorflow_docs.modeling

# Import data
!wget https://cdn.freecodecamp.org/project-data/health-costs/insurance.csv
dataset = pd.read_csv('insurance.csv')
dataset.tail()

#dataset = pd.get_dummies(dataset, columns = ['sex','smoker', 'region'], drop_first = True)

#split the dataset into features (x) and labels (y)

X = dataset.drop('expenses', axis = 1)
y = dataset['expenses']

#split the data into training and test sets(80% train, 20% test)
from sklearn.model_selection import train_test_split

train_dataset, test_dataset, train_labels, test_labels = train_test_split(X, y, test_size = 0.2, random_state = 42)

# normalize the dataset(scaling features)
from sklearn.preprocessing import StandardScaler
from tensorflow.keras import layers

scaler = StandardScaler()
train_dataset = scaler.fit_transform(train_dataset)
test_dataset = scaler.transform(test_dataset)

def build_model():
  model = keras.Sequential([
      layers.Dense(64, activation = 'relu', input_shape = [len(train_dataset[0])]),
      layers.Dense(64, activation = 'relu'),
      layers.Dense(1)
  ])
  model.compile(optimizer = 'adam', loss = 'mse', metrics = ['mae','mse'])
  return model

model = build_model()

EPOCHS = 20

history = model.fit(
    train_dataset, train_labels,
    epochs = EPOCHS, validation_split = 0.2, verbose = 1
)

# RUN THIS CELL TO TEST YOUR MODEL. DO NOT MODIFY CONTENTS.
# Test model by checking how well the model generalizes using the test set.
loss, mae, mse = model.evaluate(test_dataset, test_labels, verbose=2)

print("Testing set Mean Abs Error: {:5.2f} expenses".format(mae))

if mae < 3500:
  print("You passed the challenge. Great job!")
else:
  print("The Mean Abs Error must be less than 3500. Keep trying.")

# Plot predictions.
test_predictions = model.predict(test_dataset).flatten()

a = plt.axes(aspect='equal')
plt.scatter(test_labels, test_predictions)
plt.xlabel('True values (expenses)')
plt.ylabel('Predictions (expenses)')
lims = [0, 50000]
plt.xlim(lims)
plt.ylim(lims)
_ = plt.plot(lims,lims)